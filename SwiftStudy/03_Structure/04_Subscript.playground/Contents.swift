import UIKit
// 3-4 添字付け

/**
 -----------------------------------------------------------------
 ■ 添字付けとは
 `添字付け(subscript)`とは、複数個のプロパティがあるとき、配列の要素に対してす
 るように添字を使ってアクセスできるようにする機能。添字を使ってアクセスできるもの
 には適用可能。また、読み書きができるものと、読み出しだけができるものにも適用可能。
 `subscript`は、get節は必須だけど、set節はなくてもOK。また、set節には仮引数を
 指定でき、仮引数を省略した場合はお馴染みの`newValue`でアクセスできる。
 -----------------------------------------------------------------
 */
添字付けの例: do {
    /// 蕎麦屋のメニューを扱う構造体。
    /// 全6品を取り扱い、前半3つは定番メニューのため、変更不可。
    /// 後半3つは変更可能とする。
    struct FoodMenu {
        let menu    = ["ざる", "かけ", "たぬき"]       // 定番メニュー
        var subMenu = ["とろろ", "天ぷら", "南ばん"]    // 時期によって変わるメニュー
        let count   = 6                             // 取り扱い可能なメニュー数(これ以上は覚えきれない)

        subscript (i: Int) -> String {
            // 「定番メニュー」 or 「時期によって変わるメニュー」から値を取得
            // ※ 三項演算子の条件が甘い!!メニュー数以上の値が引数の場合エラーになる。。
            // i < menu.count にするとエラーになる(Execution was interrupted) menu.countの値が6になるのかな。。。
            // selfをつければOK
            get {
                return i < self.menu.count ? menu[i] : subMenu[i - 3]
            }
            // 引数の添字が「定番メニュー」の要素数より大きく、「取り扱い可能なメニュー」の要素数より小さければ、
            // 添字に紐づく「時期によって変わるメニュー」の内容を差し替える
            set {
                if i > self.menu.count - 1 && i < count {
                    subMenu[i - 3] = newValue
                }
            }
        }
    }
    // 検証
    var dec = FoodMenu()
    for i in 0..<dec.count {
        print(dec[i], terminator: " ")        // ざる かけ たぬき とろろ 天ぷら 南ばん ※改行しない
    }
    print()                                   // 改行

    // subscriptのset条件の検証
    dec[0] = "もりそば"                         // 添字[0~2]の「定番メニュ」ーは変更されない
    dec[5] = "くるみそば"                       // 添字[3~5]の「時期によって変わるメニュー」は変更できる
    for i in 0..<dec.count {
        print(dec[i], terminator: " ")        // ざる かけ たぬき とろろ 天ぷら くるみそば
    }

    // 雰囲気は分かったが、原理が分からない。
}

/**
 -----------------------------------------------------------------
 ■ 型への添字付け定義
 -----------------------------------------------------------------
 */
型への添字付け定義: do {
    struct Impression {
        static subscript(i: Int) -> String {
            let level = (i < 0) ? 0 : (i > 4 ? 4 : i)
            return ["大凶", "凶", "吉", "中吉", "大吉"][level]
        }
    }
    print(Impression[4])        // 大吉
}
