import UIKit

// 有値オプショナル型

/**
 -----------------------------------------------------------------
 ■ 有値オプショナル型(implicitly unwrapped optional) ※IUO
 プログラムの前後関係から、確実にnil以外の値を持っていると判断できる場合、開示指定
 をしなくても普通の変数のように文や式の中で利用できる記述。コンパイラが判断して、自
 動的に開示した値を使ってくれる。
 -----------------------------------------------------------------
 */
有値の定義: do {
    let year: Int! = Int("1986")
    print("ハレー彗星は\(year + 75)年に来る")     // ハレー彗星は2061年に来る
}

有値の定義_NG: do {
    let year: Int! = Int("next")              // Int型に変換できず、nilが代入
//    print("ハレー彗星は\(year + 75)年に来る")   // Fatal error。nilに対して計算を行っているため
}

/**
 -----------------------------------------------------------------
 ■ オプショナル型を要素とする配列
 `通常の値が入っていない場所`をつくることができる。なお、有値オプショナル型を要素
 とする配列を宣言することはできない。ただし、配列自体が存在しないことがあるという
 意味の、配列のオプショナル型は有値オプショナルとして宣言できる。初期値だけはnil
 かもしれない変数を便利に使うという目的で使用すると良い。
 -----------------------------------------------------------------
 */

試験の点数を配列に格納する場合_欠席をnilで表す: do {
    var mark: [Int?] = [10, 5, nil, 7, 3, nil, 0, 10, 1, 8]
    print(mark)
}     // [Optional(10), Optional(5), nil, Optional(7), Optional(3), nil, Optional(0),
      //  Optional(10), Optional(1), Optional(8)]


配列の有値オプショナル: do {
//    var names: [Strnig!]      // コンパイルエラー。有値オプショナル型を要素とする配列は宣言できない
    var list: [String]!         // 宣言できる
}

/**
 -----------------------------------------------------------------
 ■ 有値オプショナル型と関数
 -----------------------------------------------------------------
 */
関数の返り値が有値オプショナル型の関数: do {

    /// 引数に文字列「[]」を前後に付与して返却する。本来はString?で返却すべき。
    /// - Parameter s: 文字列
    /// - Returns: "[]"を前後に付与した文字列 or nil
    func quote(_ s: String) -> String! {
        return s != "" ? "[" + s + "]" : nil
    }

    /// 引数に文字列「-」を前に付与して出力する。本来はStringで引数の型を宣言すべき。
    /// - Parameter title: 文字列
    func dash(_ title: String!) {
        print("_" + title)                      // nilを受けとった場合、エラーになる
    }

    // quote関数の検証
    let s1: String  = quote("睡眠の重要性")
    let s2: String? = quote("")
//    let s3: String  = quote("")
    let ss = quote("先輩")

    print(s1)                                   // [睡眠の重要性]
    print(s2)                                   // nil
    print(ss)                                   // Optional("[先輩]")

    // dash関数の検証
    let t1: String = "中諏訪駅探方"; dash(t1)     // _中諏訪駅探方
    let t2: String? = "七人目の勇者"; dash(t2)    // _七人目の勇者
//    let t3: String? = nil; dash(t3)           // Fatal error
}
