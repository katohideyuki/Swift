import UIKit

// 12-3 クロージャの使い方と記法

/**
 -----------------------------------------------------------------
 ■ 引数の省略
 変数宣言時に型が明確に定義されていれば、クロージャ側でいろいろ省略して記述できる。
 -----------------------------------------------------------------
 */
引数の省略: do {
    print("------------ 引数の省略 ------------")
    var clos: (Int, Int) -> String
        = { (a: Int, b: Int) -> String in return "\(a)/\(b)" }

    引数の型を省略: do {
        clos = { a, b -> String in "\(a)/\(b)" }
    }

    戻り値の方も省略: do {
        clos = { a, b in "\(a)/\(b)" }
    }

    さらに仮引数に: do {
        clos = { _, b in "\(b)" }
    }/** 引数のうちいずれかがクロージャで使われないのであれば、「_」でOK */

}

/**
 -----------------------------------------------------------------
 ■ 引数リスト自体の省略
 仮引数の名前自体に意味を持たすことができないなら、`$0, $1 ...`のようｊに表現し
 ても良い。
 -----------------------------------------------------------------
 */
引数リスト自体の省略: do {
    print("------------ 引数リスト自体の省略 ------------")

    var clos: (Int, Int) -> String
    clos = { "\($0)/\($1)" }
}

/**
 -----------------------------------------------------------------
 ■ 配列の整列
 関数やメソッドにクロージャを渡して処理することが多い。
 -----------------------------------------------------------------
 */
文字数の少ない順に並べ替える: do {
    print("------------ 文字数の少ない順に並べ替える ------------")

    let list = ["fig.pdf", "filelist1.swift", "OLD", "sample.swift"]

    // 引数としてクロージャを指定して、第一引数が第二引数よりも配列の最初の方にある場合にtrueを返す
    let slist = list.sorted(by: {
        (a: String, b: String) -> Bool in a < b })

    // 検証
    print("\(slist) ①")        // ["OLD", "fig.pdf", "filelist1.swift", "sample.swift"]


    型推論で引数を省略: do {
        let xlist = list.sorted(by: { $0 < $1 })
        print("\(xlist) ②")    // ["OLD", "fig.pdf", "filelist1.swift", "sample.swift"]
    }

    演算子は引数を2つとる関数と同じなので_もっと省略できる: do {
        let xlist = list.sorted(by: <)
        print("\(xlist) ③")    // ["OLD", "fig.pdf", "filelist1.swift", "sample.swift"]
    }
}

/**
 -----------------------------------------------------------------
 ■ 配列要素の選択
 -----------------------------------------------------------------
 */
条件によって配列を作り直す: do {
    print("------------ 条件によって配列を作り直す ------------")

    /// 条件に合致した配列と合致しない配列の2つを返す。
    /// - Parameters:
    ///   - list: 判定対象の配列
    ///   - filter: 条件となるクロージャ
    func separate(_ list: [String], by filter:(String) -> Bool)
    -> ([String], [String]) { /* 配列のタプルを返す */

        var sel = [String]()    // 条件に合致する要素を格納
        var des = [String]()    // 条件に合致しない要素を格納

        for s in list {
            // クロージャを使って条件判定
            if filter(s) {
                sel.append(s)
            }else{
                des.append(s)
            }
        }
        // タプルを作って返す
        return (sel, des)
    }

    // 検証
    let list = ["fig.pdf", "filelist1.swift", "OLD", "sample.swift"]

    /* 1つでも英大文字を含むかどうか */
    let t = separate(list, by: {
        for ch in $0 {
            if case "A" ... "Z" = ch { return true }
        }
        return false
    })

    print(t)        // (["OLD"], ["fig.pdf", "filelist1.swift", "sample.swift"])

    /**
     -----------------------------------------------------------------
     ■ 接尾クロージャ
     クロージャは引数の最後に定義することで、特別で記述方法ができる。Swiftではこの
     記法をよく使う。
     -----------------------------------------------------------------
     */
    接尾クロージャ: do {
        //
        let t2 = separate(list) {
            for ch in $0 {
                if case "A" ... "Z" = ch { return true }
            }
            return false
        }
    }
}

/**
 -----------------------------------------------------------------
 ■ エラーを投げるクロージャ
 -----------------------------------------------------------------
 */
エラーを投げる: do {
    print("------------ エラーを投げる ------------")

    /* 要素の平均値を返却するクロージャ */
    let avg = { (a: [Double]) throws -> Double in
        // 引数の要素が0個以上じゃなかったらエラーを投げる
        guard a.count > 0 else { throw NSError(domain: "sample", code: -1) }

        var sum = 0.0                       // 累計値
        for d in a { sum += d }             // 引数の要素を加算していく
        return sum / Double(a.count)        // 累計値を要素数で割り、平均値を返却する
    }

    // 検証
    if let d = try? avg([4.0, 2.2]) { print(d) }        // 3.1
    var err = try avg([])                               // 空の要素を渡してエラー発生

} catch {
    print("error!!")
}
