import UIKit

/** 1.2 制御構文 */

/**
 -----------------------------------------------------------------
 ■ 文
 文末にセミコロン「;」は不要。単純な文は、1行に記述することができ、「;」で区切っ
 て1行に複数の文を書くこともできる。逆にカンマ演算子「,」がないので、代入をカンマ
 で続けることはできない。
 -----------------------------------------------------------------
 */
文: do {
    var a = 1; var b = 2
    print(a, b)     // 1 2
}

/**
 -----------------------------------------------------------------
 ■ if文
 条件を()で囲む必要はなく、省略できる。ただし、コードブロック{}の括弧は、文が1つ
 しかなくても必ず記述すること。
 -----------------------------------------------------------------
 */
if文: do {
    var a = Int.random(in: -3..<5)      // -3 ~ 5の乱数を代入
    let b: Int                          // if文ないで必ず代入されるので、初期値は不要

    if a >= 0 {
        b = a
    } else {
        b = 100
    }
    print(b)
}

三項演算子: do {
    var a = Int.random(in: -3..<5)      // -3 ~ 5の乱数を代入
    let b = a >= 0 ? a : 100
    print(b)
}

/**
 -----------------------------------------------------------------
 ■ while文
 ループから抜け出すにはbreak文、次の繰り返しを開始するためにはcontinue文。なお、
 `演算子<<=はシフト演算の複合代入演算子`のこと。
 -----------------------------------------------------------------
 */
整数の表現に必要なビット数を求める: do {
    let val = 10_032
    var i   = 1, mask = 2
    // ループを出た時のiが、求めるビット数
    while mask <= val {
        mask <<= 1      // maskを1ビットずらす
        i += 1
    }
    print(i)            // 14
}

/**
 -----------------------------------------------------------------
 ■ repeat-while文
 do-while文に相当する。コードブロックを必ず1回実行してから繰り返し条件を判定する。
 -----------------------------------------------------------------
 */
コラッツの問題: do {
    var n = 7
    // nが偶数であればn/2、奇数であれば3n+1
    repeat {
        print("\(n) ", terminator: "")       // 改行しない
        if n % 2 == 0 {
            n /= 2
        } else {
            n = n * 3 + 1
        }
    } while n > 1
    print(n)                                // 7 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1
}

/**
 -----------------------------------------------------------------
 ■ for-in文
 繰り返し構文。範囲や集合から取り出された値は、繰り返し処理の最初に定数に代入され、
 処理の間は変更されない。そのため、`forの後ろに書かれた定数名には、暗黙のうちに`
 `letが記述されている`ものと考える。
 ```Swift for-in文の概要
 for 定数名 in 式 {
    処理
 }
 ```
 2つの数の間を表す構造体と、そのインスタンスを生成する演算子「..<」および「...」
 が用意されている。これら演算子を`範囲演算子`と呼ぶ。
 A..<B は、A<=x<B  すなわち、A以上Bより小さい
 A...B は、A<=x<=B すなわち、A以上B以下

 for-in文にはオプションで`where節を記述し、その条件に当てはまる時だけコードブロ`
 `ックを実行させる`ことができる。

 for-in文では配列から要素を取り出して使うこともできる。
 -----------------------------------------------------------------
 */
九九の表を作成: do {
    for i in 1 ..< 10 {         // iにはletやvarを指定しない
        var line = ""           // 1行分の文字を格納する
        for j in 1 ..< 10 {
            let n = i * j
            // nが10以下なら空白を連結
            if n < 10 { line += " " }
            line += "\(n)"      // 文字列を連結
        }
        print(line)             // 九九の表を出力
    }
}

forIn文で3と8の倍数を表示しない: do {
    for i in 1..<64 where i % 3 != 0 && i % 8 != 0 {
        print(i, terminator: " ")       // 数字と空白を、改行せず表示
    }
    print()                             // 改行のみ出力
}

配列から一致する文字列を探す: do {
    let name  = "koko"
    let group = ["jonah", "visha", "koko", "valmet", "tanya"]
    // 配列から一致する要素を見つける関数は、配列自体に用意されているため、本来はそれを使う
    for s in group {
        if name == s {
            print("\(s)が見つかりました。")      // kokoが見つかりました。
            break                             // 繰り返し終了
        }
    }
}

/**
 -----------------------------------------------------------------
 ■ switch文
 `break`で抜ける必要なし。いずれかに一致した場合、その処理を実行しswitch文から
 抜ける。なお、一致しても次のcase節を実行したい場合、`tallthrough`という特別な
 文が用意されている。ちなみに、いずれかの分岐に`必ず一致する`必要がある。一致しな
 い場合はコンパイルエラーとなる。そのため、どのcaseにも当てはまらない場合があり得
 るなら、default節を記述する。なお、`default文`は、必ず最後に記述する。
 ```Swift switch文の概要
 switch 式 {
    case ラベル1:
        文
    default:
        文
 }
 ```
 -----------------------------------------------------------------
 */
sample: do {
    let 追試下限 = 45
    var score = 65      // 例として65点だったとする
    switch score {
        case 追試下限..<75: print("追試験")        // 65点なので、これが実行される
        case 90...100   : print("秀")
        case 80..<90    : print("優")
        case 70..<80    : print("良")
        case 60..<70    : print("可")            // このcaseにも条件が一致しているが、上の記述が優先されるため実行されない
        default         : print("不可")
    }
}

/**
 -----------------------------------------------------------------
 ■ ラベル付きのループ文
 滅多に使うことはないが、多重ループを構成するwhile文やfor文などにラベルをつけてお
 き、break文とcontinue文を使用する。
 ```Swift ラベル付きループの例
 loop1: while 条件★  {
    loop2: while 条件★  {
        while 条件 {
            break loop1         // loop1の処理を抜ける
            countinue loop1     // スキップしてloop1の処理を繰り返す
            break loop2         // loop2の処理を抜ける
            countinue loop2     // スキップしてloop2の処理を繰り返す
        }
    }
 }
 ```
 -----------------------------------------------------------------
 */
ひと月のカレンダーを印字する: do {
    let days = 31       // 1ヶ月のにっす
    let firstDay = 2    // 1日目の曜日(0:日曜)
    var w = 0           // 曜日のための変数

    // 月初めに空白を入れる
    while w < firstDay {
        print("   ", terminator: "")                // 改行しない
        w += 1
    }

    var d = 1                                       // 日にちを示す変数
    // 途中で
    loop: while true {
        while w < 7 {
            let pad = d < 10 ? " " : ""             // 1桁の場合、空白を代入
            print(pad + " \(d)", terminator: "")
            w += 1
            d += 1

            // 31日以上になったらloopラベルの繰り返し処理を終了する
            if d > days {
                print()                             // 改行
                break loop                          // loopラベル処理全体から脱出
            }
        }
        print()                                     // 1週間分の日数を出力したため改行する
        w = 0                                       // 曜日を日曜日に戻す
    }
}

/**
 -----------------------------------------------------------------
 ■ ラベル付きのif文、switch文
 if文を使った構造が手に負えないくらい複雑になった場合、Swiftは`ネスとした構文の`
 `中から一気に特定のif文の外に抜け出す`方法がある。then節やelse節の内部で、ラベ
 ルを指定してbreakを実行すると、if文全体の実行から抜け出して次の文の実行に移るこ
 とができる。
 -----------------------------------------------------------------
 */
// うるう年は、西暦年が4で割り切れ、かつ100で割り切れないか400で割り切れる年
ラベル付きのif文の例: do {
    let year = Int.random(in: 1150...1200)            // 今年度
    // 4で割り切れる場合
    leap: if year % 4 == 0 {
        // 4で割り切れる且つ、100で割り切れる場合
        if year % 100 == 0 {
            // 4で割り切れる且つ、100で割り切れる且つ、400で割り切れる場合
            if year % 400 == 0 {
                print("\(year)年は400で割り切れるのでうるう年です。")
                break leap
            }
            // 4で割り切れる且つ、100で割り切れるが、400で割り切れない場合
            print("\(year)年は400で割り切れないのでうるう年ではありません。")
            break leap
        }
        // 4で割り切れるが、100で割り切れない場合
        print("\(year)年は4で割り切れるのでうるう年です。")
    } else {
        // 4で割り切れない場合
        print("\(year)年は4で割り切れないのでうるう年ではありません。")
    }
}

/**
 -----------------------------------------------------------------
 ■ do文
 C言語では、制御構文と関係なく、ある範囲でのみ有効な変数を使う目的でコードブロック
 を単独で利用することができたが、Swiftではdo文を使う。学習用でdo文を多用している
 が、本来はプログラムが複雑で見通しの悪い場合にのみ使う方がよい。さらに言うと、その
 ような分かりづらいプログラムは書くべきではないので、do文を使う箇所はあまりなさそう。
 ちなみに、do文は文法上、エラー処理で用いるdo-catch文の後半のcatch節を記述しなか
 った場合に相当する。
 -----------------------------------------------------------------
 */
学習用にいつもつかっているdo文: do {
    let blood = "S"        // 血液型
    // 指定した血液型に一致しなければメッセージを出力
    for t in ["A", "B", "O", "AB"] {
        if blood == t { break 学習用にいつもつかっているdo文 }
    }
    print("見つかりませんでした。")
}
