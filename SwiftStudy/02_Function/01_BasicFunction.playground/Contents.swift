import UIKit

/**
 -----------------------------------------------------------------
 ■ 間定義の概要
 関数名、仮引数名とも、原則的には小文字開始のキャメルケースで記述する。
 -----------------------------------------------------------------
 */
単純な関数: do {
    var total = 0

    /// 整数の引数を1つとり、totalに加算した値を返却する
    /// - Parameter n: 整数
    /// - Returns: 加算されたtotal
    func count(n: Int) -> Int {
        total += n
        return total
    }

    /// totalを0にする
    func reset() { total = 0}

    reset()
    let a = 10
    let b = count(n: a - 5)     // 実引数の値は5
    print("\(b)")               // 5
    print("\(count(n: a))")     // 15 count関数の戻り値を表示
    reset()                     // 0に戻す
    print("\(count(n: -2))")    // -2
}

/**
 -----------------------------------------------------------------
 ■ returnの省略
 関数本体がreturnだけの場合、`returnを省略して式だけを記述することができる。`
 そして、関数本体が`式だけからなる場合、その式の値がreturnで返されるとみなされる`
 ため、returnを省略できる。
 -----------------------------------------------------------------
 */
この2つの関数は同義: do {
    let total = 10
    /// 関数A
    func messageA() -> String {
        return "現在の値は\(total)です。"
    }
    /// 関数B
    func messageB() -> String { "現在の値は\(total)です。" }

    print(messageA())       // 現在の値は10です。
    print(messageB())       // 現在の値は10です。
}

クロージャの例: do {

    /// 引数が整数5以上であれば、整数を文字列に変換して
    /// - Parameters:
    ///   - num: 整数
    ///   - cS: 整数を文字列に変換する関数
    func outStr(num: Int, cS: (Int) -> String) {
        if num >= 5 {
            print("これは5以上の数字\(cS(num))です。")
        }
    }

    /// 整数を文字列に変換
    /// - Parameter num: 整数
    /// - Returns: 文字列に変換した整数
    func convertStr(num: Int) -> String { String(num) }

    // 関数の呼び出し
    outStr(num: 7, cS: convertStr)      // これは5以上の数字7です。
}

/**
 -----------------------------------------------------------------
 ■ 仮引数の省略
 関数によって、インタフェースの整合性のために引数を指定しているものの、関数の処理
 ではその値を全く使わないことがある。（何のために?）
 -----------------------------------------------------------------
 */
関数内で使わないけど引数を指定する: do {

    /// 受け取ったInt型の値を合算して出力する。
    /// - Parameters:
    ///   - a: 整数
    ///   - b: 整数
    ///   - _: 真偽値（使わない）
    func plus(_ a:Int, _ b:Int, _:Bool) {
        print(a + b)
    }

    // 第3引数の値が違っても、使っていないから結果は同じ
    plus(1, 2, true)        // 3
    plus(1, 2, false)       // 3
}

/**
 -----------------------------------------------------------------
 ■ 下線の特殊な用法
 `「 _ 」`は識別子の一部として使うことができる。一言で言えば「無視する」と言った意
 味合いで使われる。また、何とでも組み合わせることができるため、ワイルドカードとも
 呼ばれる。
 さらに`式の値の代入先として使った場合、代入された値は使われることなく捨てられる。`
 -----------------------------------------------------------------
 */
変数として定義するが使われることなく捨てられる: do {
    _ = 1
}

繰り返し回数が決まっている処理の場合に使える: do {
    for _ in 1...10 {
        print("回数は意識せず、10回出力する。")
    }
}
