import UIKit

/**
 -----------------------------------------------------------------
 ■ inout引数
 関数内の処理によって呼び出し側の変数を変更したい場合、その引数に`inout`という
 キーワードを付加する。呼び出し側はinput引数に対応する実引数として`&`という記号
 をつけた変数を指定しなければならない。
 -----------------------------------------------------------------
 */
inout引数を使ったmySwap関数: do {
    /// 2つの引数の値を入れ替える
    /// - Parameters:
    ///   - a: 整数1
    ///   - b: 整数2
    func mySwap(_ a: inout Int, _ b: inout Int) {
        let t = a; a = b; b = t
    }

    var x = 100
    var y = 0
    mySwap(&x, &y)                  // 実引数を渡すため「&」を付加する
    print("x = \(x), y = \(y)")     // x = 0, y = 100
}

/**
 -----------------------------------------------------------------
 ■ 関数の引数に規定値を指定する
 引数には「規定値（デフォルト値）」として決まった値を割り当てておき、引数が指定さ
 れなかった場合、使用されるようにすることができる。
 ただし、デフォルト値と同時にinoutを指定することはできない。（当然）

 [デフォルト値を使用する際のルール]
 1. デフォルト値を持つ引数は、引数リストのどこにあっても良いが、その引数よりも後
    ろ（右）のデフォルト値を持たない引数には、必ず引数ラベルを付加する
 2. 引数ラベルを持つ複数の引数にデフォルト値が指定されている場合、引数リストで定義
    されている順序が守られている限り、どれを指定しても、どれを省略しても良い。
 3. 引数ラベルを持たない引数にデフォルト値が指定されている場合、ある引数から後ろ
 （右）をまとめて省略できるが、途中の引数だけを省略することはできない。
 -----------------------------------------------------------------
 */
引数に規定値が指定された関数: do {
    let fontSize: Float = 12.0
    /// 引数を出力する。第3引数のboldがtrueだった場合のみ、出力する前に文字列を連結する。
    /// - Parameters:
    ///   - name: 名前
    ///   - size: サイズ
    ///   - bold: trueであれば文字列を連結する
    func setFloat(name: String, size: Float = fontSize, bold: Bool = false) {
        print("\(name) \(size)" + (bold ? " [B] ": ""))
    }

    /// 引数を出力する。
    /// - Parameters:
    ///   - level: 整数
    ///   - alpha: 小数点
    func setGray(level: Int = 255, _ alpha: Float = 1.0) {
        print("Gray=\(level), Alpha=\(alpha)")
    }

    // 呼び出し側の例 1
    setFloat(name: "RagalnPunch")                       // RagalnPunch 12.0 ※デフォルト値が設定されているから、引数を省略
    setFloat(name: "Courier", bold: true)               // Courier 12.0 [B] ※デフォルト値は上書きできる
    setFloat(name: "Times", size: 16.0, bold: true)     // Times 16.0 [B]

    // 呼び出し側の例 2
    setGray()                                           // Gray=255, Alpha=1.0 ※デフォルト値が設定されているから、引数を省略
    setGray(level: 240)                                 // Gray=240, Alpha=1.0 ※デフォルト値は上書きできる
    setGray(level: 128, 0.5)                            // Gray=128, Alpha=0.5
}

/**
 -----------------------------------------------------------------
 ■ 引数の値は関数内で変更できない
 関数の仮引数に与えられた値は、処理中に変更することができない。(finalみたい）

 -----------------------------------------------------------------
 */
ツェラーの公式_変更前: do {
    /// 渡した年月日の曜日を整数で表して返す。
    /// 曜日（日曜＝0、月曜=1、...)
    /// 欠陥があり、1月と2月は前年度の13月、14月という風に渡す必要がある。
    /// - Parameters:
    ///   - y: 年
    ///   - m: 月
    ///   - d: 日
    /// - Returns: 整数で表現した曜日
    func dayOfWeek(_ y: Int, _ m: Int, _ d: Int) -> Int {
        let leap = y + y / 4 - y / 100 + y / 400
        return (leap + (13 * m + 8) / 5 + d) % 7
    }
    print("2022年1月25日 → \(dayOfWeek(2022, 1, 25))")     // 2022年1月25日 → 0 ※2021年1月25日の月曜日を返却している
}

ツェラーの公式_変更版: do {
    /// 渡した年月日の曜日を整数で表して返す。
    /// 曜日（日曜＝0、月曜=1、...)
    /// - Parameters:
    ///   - y: 年
    ///   - m: 月
    ///   - d: 日
    /// - Returns: 整数で表現した曜日
    func dayOfWeek(_ y: Int, _ m: Int, _ d: Int) -> Int{
        var y = y, m = m    // 変数y, mは仮引数とは別物
        // 1, 2月であれば、前年の13月、14月として計算する
        if m < 3 {
            m += 12; y -= 1
        }
        let leap = y + y / 4 - y / 100 + y / 400
        return (leap + (13 * m + 8) / 5 + d) % 7
    }
    print("2022年1月25日 → \(dayOfWeek(2022, 1, 25))")     // 2022年1月25日 → 2 ※正しい
}

/**
 -----------------------------------------------------------------
 ■ 関数内の関数
 ネスト関数は、それ自身より前に定義されたローカル変数などにアクセルできる。ト
 ップレベルの（ネストしてない）関数は、それ自身よりも前に呼び出される定義を記述し
 ても問題ない。ただし、`ネスト関数は変数や定数と同じく、定義された位置よりも後ろ`
 `からでなければ利用できない`。
 -----------------------------------------------------------------
 */
ひと月のカレンダーを印字する関数: do {
    /// 月の最初の日の曜日（日曜なら0）と日数を受け取り、ひと月のカレンダーを印字する。
    /// - Parameters:
    ///   - fday: 月の最初の日の曜日を表した整数
    ///   - days: 月の日数
    func printMonth(first fday: Int, days: Int) {
        var d = 1 - fday        // 月初の空白は負と0で表す

        /// ネスト関数
        /// - Returns: 1桁の数字であれば、空白を1つ付与し、レイアウトを調整する。
        func daystr() -> String {
            if d <= 0 {
                return " "      // 月初の空白
            } else {
                return (d < 10 ? "  \(d)" : " \(d)")
            }
        }

        while d <= days {
            var line = ""           // 一週間分の日付を並べる
            for _ in 0 ..< 7 {
                line += daystr()    // ネスト関数を呼び出す
                d    += 1
                // 月末であればループ終了
                if d > days { break }
            }
            print(line)
        }
    }
    printMonth(first: 0, days: 30)
}
