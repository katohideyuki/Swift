import UIKit

// 6-4 辞書

/**
 -----------------------------------------------------------------
 ■ 辞書
 Javaで言うMapみたいなもん？
 -----------------------------------------------------------------
 */
初期化: do {
    let a = ["siwft": 1, "java": 2]
    print("出力順?代入順?どっちかわからないが出力順が担保されない。。\(a)")        // ["siwft": 1, "java": 2]
}

変数を用意して代入: do {
    var a : [String : Int]
    a = ["代入してみる" : 3]
    print(a)        // ["代入してみる": 3]
}

イニシャライザの呼び出し: do {
    var a = [String : Int]()
    print("空だよ 👉 \(a)")
}

空の辞書: do {
    var a : [String : Int] = [:]
    print("空だよ 👉 \(a)")
}

パラメータ付き型で指定: do {
    var a : Dictionary<String, Int>
    var b = Dictionary<String, Int>()
    print("空だよ 👉 \(b)")
}

/**
 -----------------------------------------------------------------
 ■ 辞書へのアクセス
 辞書のキーになれるのは`プロトコルHashable`に適合した型のみ。
 -----------------------------------------------------------------
 */
値の返り値はオプショナル型 : do {
    let a = ["ビール": 500, "日本酒": 1000]
    // オプショナル束縛で値を扱う
    if let sake = a["日本酒"] { print("日本酒いくら? 👉 \(sake)") }  // 1000
    if let wine = a["ワイン"] { print("ワインは? 👉 \(wine)")}      // nilが返り何も出力されない
}

値を代入する: do {
    var a = ["Ruby": 1995]
    print(a)                                      // ["Ruby": 1995]
    a["java"] = 1995
    a["Python"] = 1991
    print("JavaとPythonを追加した 👉 \(a)")         // ["Python": 1991, "java": 1995, "Ruby": 1995]
    a["java"] = nil
    print("Javaに紐ずく値をnilにした 👉 \(a)")       // ["Python": 1991, "Ruby": 1995]
}

/**
 -----------------------------------------------------------------
 ■ 辞書の比較
 「==」「!=」が使える。互いに同じキーの集合を持ち、同じキーに等しい値が割り当てら
 れている辞書をtrueとみなす。
 -----------------------------------------------------------------
 */
辞書の比較: do {
    var a = ["one": "I", "two": "II", "three": "III"]
    let b = ["two": "II", "one": "I"]
    print("falseになるよ 👉 \(a == b)")
    a["three"] = nil
    print("キー「three」をnilにしたからtrueになるよ。順番は関係ないらしい 👉 \(a == b)")
}

/**
 -----------------------------------------------------------------
 ■ 辞書から要素を取り出す
 -----------------------------------------------------------------
 */
辞書から要素を取り出す: do {
    var dictionary   = [String: Int]()
    var count = 1

    // 文字をkey、countをValueとして辞書に追加していく
    for ch in "あいうえお" {
        dictionary[String(ch)] = count
        count += 1
    }
    print(dictionary)

    // タプルで取り出す
    for tuple in dictionary {
        print("\(tuple.key)=\(tuple.value)", terminator: " ")       // え=4 う=3 あ=1 お=5 い=2
    }
    print()

    // こっちの書き方の方が馴染みがある
    for (k, v) in dictionary {
        print("\(k)=\(v)", terminator: " ")                         // え=4 う=3 あ=1 お=5 い=2
    }
    print()
}

/**
 -----------------------------------------------------------------
 ■ 辞書の添字付けと検索の規定値
 キーを使って要素にアクセスして値を取り出した場合、返却される値はオプショナル(Value?型)。
 値がないときに返却される値がnilだから。そのときnilではなくデフォルト値を返す方法がある。
 -----------------------------------------------------------------
 */
デフォルト値の設定方法: do {
    let score = ["田中": 67, "佐々木": 80, "鈴木": 100]
    let m1 = score["佐藤"]
    let m2 = score["向井", default: 0]
    print("値が追加されていないからnilになる 👉 \(m1)")
    print("デフォルト値が設定されているから「0」が出力される 👉 \(m2)")
    print("元の辞書には影響しないためscore[\"向井\"]とやると、デフォルト値ではなくnilが出力される 👉 \(score["向井"])")
}

/**
 -----------------------------------------------------------------
 ■ コレクションとしてアクセスする
 辞書には`keys`、`values`というプロパティがあり、それぞれ辞書のキーや値をコレ
 クションに適合した型で返却する。ただし、要素の並び順は保証しないため、実行のたび
 に違う。`辞書.indices`でインデックスを取得できる。
 -----------------------------------------------------------------
 */
添字を共有している: do {
    let dic = ["A": 1, "B": 2, "C": 3, "D": 4, "E": 5]
    print("dicの中身 👉 \(dic)")                   // ["C": 3, "B": 2, "D": 4, "E": 5, "A": 1]
    print("dicのキーのみ取得する 👉 \(dic.keys)")    // ["C", "B", "D", "E", "A"]
    print("dicの値のみ取得する 👉 \(dic.values)")    // [3, 2, 4, 5, 1]
}

辞書の内容を変更するプログラム: do {
    書き方その1: do {
        var dic = ["Aさん": 1, "Bさん": 2, "Cさん": 3, "Dさん": 4]
        let exam = ["Bさん": 10, "Dさん": 20, "Eさん": 30, "Fさん": 40]

        // dicに存在するキーがexamにも存在し、examの値の方が大きければdicの値をその値に更新する
        for student in dic {
            if let v = exam[student.key], v > student.value {
                dic[student.key] = v
            }
        }
        print("BさんとDさんの値が更新されているよ 👉 \(dic)")  // ["Aさん": 1, "Cさん": 3, "Bさん": 10, "Dさん": 20]
    }

    書き方その2: do {
        var dic = ["Aさん": 1, "Bさん": 2, "Cさん": 3, "Dさん": 4]
        let exam = ["Bさん": 10, "Dさん": 20, "Eさん": 30, "Fさん": 40]

        // dicから添字を順次取り出す
        for index in dic.indices {
            let student = dic[index]                          // 取り出した添字を使って、要素（キーとバリューのペア）を取得する
            if let v = exam[student.key], v > student.value {
                dic.values[index] = v                         // dicとvaluesは同じ添字を使えるので、キーでアクセスせず添字でアクセスして値を更新
            }
        }
        print("BさんとDさんの値が更新されているよ 👉 \(dic)")       // ["Bさん": 10, "Dさん": 20, "Cさん": 3, "Aさん": 1]
    }
}
