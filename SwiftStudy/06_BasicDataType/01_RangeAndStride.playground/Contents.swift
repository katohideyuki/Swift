import UIKit

// 6-1 範囲型とストライド型
/**

 -----------------------------------------------------------------
 ■ 範囲と片側範囲
 `A..<B` ⇨ A以上Bより小さい
 `A...B` ⇨ A以上B以下
 `A...`  ⇨ A以上
 `..<B`  ⇨ Bより小さい
 `...B`  ⇨ B以下
 -----------------------------------------------------------------
 */
範囲と片側範囲をあれこれ試してみる: do {
    // 0,1,2,3,4,5,6,7,8,9,
    for num in 0..<10 { print("\(num),", terminator: "") }
    print()

    // 0,1,2,3,4,5,6,7,8,9,10,
    let intRange = 0...10
    for num in intRange { print("\(num),", terminator: "") }
    print()

    // 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,
    for num in 0... {
        if num == 15 { break }
        print("\(num),", terminator: "")
    }
    print()

    /*** 「..<B」や「...B」の試し方が見つからなかったので省略 ***/

    let semi = 0 ..< 10
    print("引数の値が範囲に含まれているからtrueになるよ 👉 \(semi.contains(5))")
}

/**
 -----------------------------------------------------------------
 ■ 乱数の生成
 -----------------------------------------------------------------
 */
乱数を試してみる: do {
    print("0~10の範囲で乱数が生成されるよ 👉 \(Int.random(in: 0...10))")
    print("0.0~1.0の範囲で乱数が生成されるよ 👉 \(Double.random(in: 0.0...1.0))")
    print("true/falseのどちらかが生成されるよ 👉 \(Bool.random())")

    let elementArray = (0...10).shuffled()
    print("要素をランダムに並び替えるよ 👉 \(elementArray)")                       // [10, 2, 1, 5, 8, 0, 9, 7, 3, 6, 4]
    print("文字列がランダムに並び替えるよ 👉 \(String("あいうえお".shuffled()))")    // えあうおい

    let element = (0...10).randomElement()
    if let val = element { print("要素をランダムで一つ取り出すよ 👉 \(val)") }
}

/**
 -----------------------------------------------------------------
 ■ ストライド型の概要
 始点から終了点まで、指定された刻み幅で飛び飛びに値を取り出す。
 -----------------------------------------------------------------
 */
順番に取り出した最後の値が終了点の値と一致したらその値は採用しない: do {
    for num in stride(from: 0, to: 20, by: 2) {
        print(num, terminator: " ")
    }
    print()     // 0 2 4 6 8 10 12 14 16 18
}

順番に取り出した最後の値が終了点の値と一致したらその値は採用する: do {
    for num in stride(from: 0, through: 20, by: 2) {
        print(num, terminator: " ")
    }
    print()     // 0 2 4 6 8 10 12 14 16 18 20
}
